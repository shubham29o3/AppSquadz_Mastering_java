CREATE DATABASE codesquadz;
SHOW DATABASEs;
USE codesquadz;

CREATE TABLE Worker(
    WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME CHAR(25),
    LAST_NAME CHAR(25),
    SALARY INT,
    JOINING_DATE DATETIME,
    DEPARTMENT CHAR(25)
);

INSERT INTO Worker
	(WORKER_ID,FIRST_NAME,LAST_NAME,SALARY,JOINING_DATE,DEPARTMENT) VALUES
		(001,'Monika','Arora',100000,'14-02-20 09.00.00','HR'),
		(002,'Niharika','Verma',800000,'14-06-11 09.00.00','Admin'),
		(003,'Vishal','Singhal',300000,'14-02-20 09.00.00','HR'),
		(004,'Amitabh','Singh',500000,'14-02-20 09.00.00','Admin'),
		(005,'Vivek','Bhati',200000,'14-06-11 09.00.00','Admin'),
		(006,'Vipul','Diwan',750000,'14-02-20 09.00.00','Account'),
		(007,'Satish','Kumar',100000,'14-01-20 09.00.00','Account'),
		(008,'Geetika','Chauhan',900000,'14-01-11 09.00.00','Admin');
		
		
CREATE TABLE Bonus(
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
		ON DELETE CASCADE
);

INSERT INTO Bonus
	(WORKER_REF_ID,BONUS_AMOUNT,BONUS_DATE) VALUES
		(001,5000,'16-01-20'),
		(002,3000,'16-06-11'),
		(003,4000,'16-02-20'),
		(001,4500,'16-02-20'),
		(002,3500,'16-06-11');
		
CREATE TABLE Title(
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
		ON DELETE CASCADE
);

INSERT INTO Title
	(WORKER_REF_ID,WORKER_TITLE,AFFECTED_FROM) VALUES
		(001,'Manager','2016-02-20 00:00:00'),
		(002,'Executive','2016-06-11 00:00:00'),
		(008,'Executive','2016-06-11 00:00:00'),
		(005,'Manager','2016-06-11 00:00:00'),
		(004,'Asst. Manager','2016-06-11 00:00:00'),
		(007,'Executive','2016-06-11 00:00:00'),
		(006,'Lead','2016-06-11 00:00:00'),
		(003,'Lead','2016-06-11 00:00:00');
		
--------------------------------------------------------------------------------

Q1.} Write an SQL query to fetch "FIRST_NAME" from the Worker Table using the alias name <WORKER_NAME>.
		
		Select FIRST_NAME AS WORKER_NAME from Worker;
		
Q2.} Write an SQL query to fetch "FIRST_NAME" from the Worker table in upper case.

		Select upper(FIRST_NAME) from Worker;
		
Q3.} Write an SQL query to fetch unique values of DEPARTMENT from the Worker table.

		Select distinct DEPARTMENT from Worker;
		
Q4.} Write an SQL query to print the first three character of FIRST_NAME from the Worker table.

		Select substring(FIRST_NAME,1,3) from Worker;
		
Q5.} Write an SQL query to find the position of the alphabet ('a') in the first column 'Amitabh' from the Worker table.

		Select INSTR(FIRST_NAME,BINARY'a') from Worker where FIRST_NAME='Amitabh';
		
NOTE:- The INSTR does a case-insensitive search.
		Using the BINARY operator will make INSTR work as the case-sensitive function.
		
Q6.} Write an SQL query to print the FIRST_NAME from the Worker table after removing white spaces from theright side.

		Select RTRIM(FIRST_NAME) from Worker;
		
Q7.} Write an SQL query to print the DEPARTMENT from the Worker table after removing white spaces from the left side.

		Select LTRIM(DEPARTMENT) from Worker;
		
Q8.} Write an SQL query that fetches the unique values of DEPARTMENT from the Worker table and Prints its length.

		Select distinct length(DEPARTMENT) from Worker;
		
Q9.} Write an SQL query to print the FIRST_NAME from the Worker table after replacing 'a' with 'A'.

		Select REPLACE(FIRST_NAME,'a','A') from Worker;
		
Q10.} Write an SQL query to print the FIRST_NAME and LAST_NAME from the Worker table into a single column COMPLETE_NAME. A space char should seperate them.

		Select CONCAT(FIRST_NAME,' ',LAST_NAME) AS 'COMPLETE_NAME' from Worker;
		
Q11.} Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.

		Select * from Worker order by FIRST_NAME asc;
		
Q12.} Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.

		Select * from Worker order by FIRST_NAME asc,DEPARTMENT desc;
		
Q13.} Write an SQL query to print details for  Worker with the first names "Vipul" and "Satish" from the Worker table.

		Select * from Worker where FIRST_NAME in ('Vipul','Satish');
		
Q14.} Write an SQL query to print details for Worker with the first names "Vipul" and "Satish" from the Worker table.

		Select * from Worker where FIRST_NAME not in('Vipul','Satish');
		
Q15.} Write an SQL query to print details of Worker with DEPARTMENT name as "Admin".

		Select * from Worker where DEPARTMENT like 'Admin%';
		
Q16.} Write an SQL query to print details of the Worker whose FIRST_NAME contains 'a'.

		Select * from Worker where FIRST_NAME like '%a%';
		
Q17.} Write an SQL query to print details of the Worker whose FIRST_NAME ends with 'a'.

		Select * from Worker where FIRST_NAME like '%a';
		
Q18.} Write an SQL query to print details of the Worker whose FIRST_NAME ends with 'h' and contains six alphabet.

		Select * from Worker where FIRST_NAME like '_____h';
		
Q19.} Write an SQL query to print details of the Worker whose SALARY lies between 100000 and 500000.

		Select * from Worker where SALARY between 100000 and 500000;
		
Q20.} Write an SQL query to print details of the Worker who Joined in Feb'2014.

		Select * from Worker where year(JOINING_DATE) = 2014 and month(JOINING_DATE) =2;
		
Q21.} Write an SQL query to fetch the count of employees working in the department 'Admin'.

		Select COUNT(*) FROM Worker WHERE DEPARTMENT = 'Admin';
		
Q22.} Write an SQL query to fetch worker names with salaries>= 50000 and <= 100000.

		Select CONCAT(FIRST_NAME,' ',LAST_NAME) As WORKER_NAME,SALARY
		FROM worker
		WHERE WORKER_ID IN 
		(SELECT WORKER_ID FROM worker
		WHERE SALARY BETWEEN 100000 AND 500000);
		
Q23.} Write an SQL query to fetch the no. of workers for each department in descending order.

		Select DEPARTMENT, count(WORKER_ID) No_Of_Workers
		FROM worker
		GROUP BY DEPARTMENT
		ORDER BY No_Of_Workers DESC;
		
Q24.} Write an SQL query to print details of the workers who are also Managers.

		Select DISTINCT W.FIRST_NAME,T.WORKER_TITLE
		FROM Worker W
		INNER JOIN Title T
		ON W.WORKER_ID = T.WORKER_REF_ID
		AND T.WORKER_TITLE in('Manager');
		
Q25.} Write an SQL query to fetch duplicate records having matching data in some fields of the table.

		Select WORKER_TITLE,AFFECTED_FROM,COUNT(*)
		FROM Title
		GROUP BY WORKER_TITLE,AFFECTED_FROM
		HAVING COUNT(*)>1;
		
Q26.} Write an SQL query to show only odd rows from a table.
		
		Select * from Worker WHERE MOD(WORKER_ID,2) <>0;
		
Q27.} Write an SQL query to show only even rows from a table.

		Select * FROM Worker WHERE MOD(WORKER_ID,2)=0;
		
Q28.} Write an SQL query to clone a new table from another table.
		
					//The general Query to clone a table with data is:
					//Select * INTO WorkerClone FROM Worker;
					
					//The general way to clone a table without information is:
					//Select * INTO WorkerClone FROM Worker WHERE 1=0;
					
					//An alternate way to clone a table (for MySQL) Without data is:
					//CREATE TABLE WorkerClone LIKE Worker;
					
		-- First, create the WorkerClone table with the same structure as Worker
		CREATE TABLE WorkerClone AS SELECT * FROM Worker WHERE 1=0;

		-- Then, insert the data into the newly created WorkerClone table
		INSERT INTO WorkerClone SELECT * FROM Worker;
		
		
Q29.} Write an SQL query to fetch intersecting records of two table.

					//(SELECT * FROM Worker)
					//INTERSECT
					//(SELECT * FROM WorkerClone);
					
		SELECT w.*
		FROM Worker w
		INNER JOIN WorkerClone wc ON w.WORKER_ID = wc.WORKER_ID;
		
Q30.} Write an SQL query to show records from one table that another table does not have.

		(Select * from Worker) MINUS (Select * from Title);
		
Q31.} Write an SQL query to show the current date and time.

			MySQL query returns current date 
			Select CURDATE();
			
			MySQL query returns current date and time
			Select NOW();
			
			SQL query returns the current date and time
			Select getdate();
			
			Oracle query returns date  and time
			Select SYSDATE FROM DUAL;
			

Q32.} Write an SQL query to show top n (say 10) records of the table.

			query returns n records using the LIMIT method:
			Select * FROM Worker ORDER BY SALARY DESC LIMIT 10;
			
			SQL Server query to return top n recods using the TOP command:
			Select TOP 10 * FROM Worker ORDER BY SALARY DESC;
			
			Oracle query to return the top n records with the help of ROWNUM:
			Select * FROM (Select * FROM Worker ORDER BY SALARY DESC)
			WHERE ROWNUM<=10;
			
			
Now , we should have a solid foundation in intermediate SQL , let's take a look at some more advanced SQL
query questions. These questions will require us to use complex SQL syntax and concepts , such as nested 
queries, joins, unions and intersects.